// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * ---------- App enums ----------
 */
enum MentorCategory {
  trading
  gaming
  design
  fitness
  languages
  career
}

enum OfferType {
  ACCESS
  TIME
  BOTH
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

/**
 * ---------- NextAuth core models (v5 compatible) ----------
 */
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  // back-relation: all mentors this user saved
  savedMentors SavedMentor[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * ---------- App models ----------
 */
model Mentor {
  id          String         @id @default(cuid())
  name        String
  category    MentorCategory
  tagline     String
  rating      Float
  reviews     Int
  offerType   OfferType
  accessPrice Int?
  hourlyRate  Int?
  badges      Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // back-relation: all users that saved this mentor
  savedBy SavedMentor[]
}

/**
 * Join table for "Saved"
 */
model SavedMentor {
  id        String   @id @default(cuid())
  userId    String
  mentorId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  mentor Mentor @relation(fields: [mentorId], references: [id], onDelete: Cascade)

  @@unique([userId, mentorId]) // prevent dup saves
  @@index([userId])
  @@index([mentorId])
}

/**
 * Mentor application submissions
 */
model Application {
  id          String            @id @default(cuid())
  fullName    String
  email       String
  topic       String
  proofLinks  String            @db.Text
  offerType   OfferType
  accessPrice Int?
  hourlyRate  Int?
  status      ApplicationStatus @default(PENDING)
  reviewedBy  String?           // Admin email who reviewed
  reviewedAt  DateTime?
  notes       String?           @db.Text // Admin notes
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([email])
  @@index([status])
  @@index([createdAt])
}
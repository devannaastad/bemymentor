// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * ---------- App enums ----------
 */
enum MentorCategory {
  trading
  gaming
  design
  fitness
  languages
  career
}

enum OfferType {
  ACCESS
  TIME
  BOTH
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingType {
  ACCESS
  SESSION
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  REFUNDED
}

/**
 * ---------- NextAuth core models (v5 compatible) ----------
 */
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password authentication

  // Two-Factor Authentication
  twoFactorEnabled Boolean  @default(false)
  twoFactorSecret  String?  // TOTP secret (encrypted)
  backupCodes      String?  // JSON array of backup codes (encrypted)

  accounts Account[]
  sessions Session[]

  // back-relation: all mentors this user saved
  savedMentors SavedMentor[]

  // back-relation: mentor profile if this user is a mentor
  mentorProfile Mentor?

  // back-relation: all bookings made by this user
  bookings Booking[]

  // back-relation: all reviews written by this user
  reviews Review[]

  // back-relation: all notifications for this user
  notifications Notification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * ---------- App models ----------
 */
model Mentor {
  id           String         @id @default(cuid())
  userId       String         @unique // Link to User who owns this profile
  name         String
  category     MentorCategory
  tagline      String
  bio          String?        @db.Text // Full bio/description
  profileImage String?        // URL to profile photo
  socialLinks  Json?          // { twitter, linkedin, website, etc }
  rating       Float          @default(5.0)
  reviews      Int            @default(0)
  offerType    OfferType
  accessPrice  Int?
  hourlyRate   Int?
  badges       Json?
  isActive     Boolean        @default(true) // Can be toggled off by admin or mentor

  // Anti-fraud / Trust system
  isTrusted    Boolean        @default(false) // True after 5 verified bookings
  verifiedBookingsCount Int   @default(0)     // Count of verified non-scam bookings

  // Stripe Connect
  stripeConnectId String?      @unique        // Stripe Connect account ID
  stripeOnboarded Boolean      @default(false) // True when Stripe onboarding complete

  // Onboarding progress tracking
  onboardingStep   Int         @default(0)    // Current step in onboarding (0-5)
  onboardingComplete Boolean   @default(false) // True when all steps complete
  profileCompleteness Int      @default(0)    // 0-100 percentage

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // back-relation: all users that saved this mentor
  savedBy SavedMentor[]

  // back-relation: all bookings for this mentor
  bookings Booking[]

  // back-relation: all reviews for this mentor
  mentorReviews Review[]

  // back-relation: availability schedule
  availability Availability[]

  // back-relation: specific available time slots
  availableSlots AvailableSlot[]

  // back-relation: blocked time slots
  blockedSlots BlockedSlot[]

  @@index([userId])
  @@index([category])
  @@index([isActive])
  @@index([isTrusted])
}

/**
 * Join table for "Saved"
 */
model SavedMentor {
  id        String   @id @default(cuid())
  userId    String
  mentorId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  mentor Mentor @relation(fields: [mentorId], references: [id], onDelete: Cascade)

  @@unique([userId, mentorId]) // prevent dup saves
  @@index([userId])
  @@index([mentorId])
}

/**
 * Mentor application submissions
 */
model Application {
  id          String            @id @default(cuid())
  userId      String?           // Link to User who submitted (if authenticated)
  fullName    String
  email       String
  topic       String
  proofLinks  String            @db.Text
  offerType   OfferType
  accessPrice Int?
  hourlyRate  Int?
  status      ApplicationStatus @default(PENDING)
  reviewedBy  String?           // Admin email who reviewed
  reviewedAt  DateTime?
  notes       String?           @db.Text // Admin notes
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([email])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

/**
 * Bookings - purchases and sessions
 */
model Booking {
  id              String        @id @default(cuid())
  userId          String
  mentorId        String
  type            BookingType
  status          BookingStatus @default(PENDING)

  // Pricing
  totalPrice      Int           // Price in cents (USD)
  platformFee     Int?          // Platform fee in cents (calculated at booking time)
  mentorPayout    Int?          // Amount mentor receives in cents

  // For SESSION bookings only
  scheduledAt     DateTime?     // When the session is scheduled
  durationMinutes Int?          // Session duration (e.g., 60)
  meetingLink     String?       // Zoom/Google Meet link

  // Metadata
  notes           String?       @db.Text // User notes for the mentor
  cancellationReason String?    @db.Text

  // Anti-fraud verification
  isVerified      Boolean       @default(false) // Customer verified no scam
  verifiedAt      DateTime?     // When customer verified
  isFraudReported Boolean       @default(false) // Customer reported fraud
  fraudReportedAt DateTime?     // When fraud was reported
  fraudNotes      String?       @db.Text // Admin notes on fraud report

  // Payout tracking
  payoutStatus    String        @default("HELD") // HELD, RELEASED, PAID_OUT, REFUNDED
  payoutReleasedAt DateTime?    // When funds released to mentor
  payoutId        String?       // Stripe payout/transfer ID

  // Stripe info
  stripePaymentIntentId String? @unique
  stripePaidAt          DateTime?

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  mentor Mentor @relation(fields: [mentorId], references: [id], onDelete: Cascade)

  // back-relation: review for this booking (if any)
  review Review?

  @@index([userId])
  @@index([mentorId])
  @@index([status])
  @@index([scheduledAt])
  @@index([createdAt])
  @@index([isVerified])
  @@index([payoutStatus])
}

/**
 * Reviews - user reviews for mentors (only after completed bookings)
 */
model Review {
  id                String   @id @default(cuid())
  bookingId         String   @unique // One review per booking
  userId            String   // Who wrote the review
  mentorId          String   // Who is being reviewed
  rating            Int      // 1-5 stars
  comment           String?  @db.Text // Optional review text
  isVerifiedPurchase Boolean @default(true) // Always true if tied to booking
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  mentor  Mentor  @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([mentorId])
  @@index([bookingId])
  @@index([createdAt])
}
/**
 * Mentor Availability - Defines when mentors are available for sessions
 */
model Availability {
  id        String   @id @default(cuid())
  mentorId  String

  // Day of week (0 = Sunday, 1 = Monday, ... 6 = Saturday)
  dayOfWeek Int

  // Time slots in 24-hour format (e.g., "09:00", "14:30")
  startTime String
  endTime   String

  // Timezone (e.g., "America/New_York", "Europe/London")
  timezone  String   @default("America/New_York")

  // Allow mentor to temporarily disable specific slots
  isActive  Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mentor Mentor @relation(fields: [mentorId], references: [id], onDelete: Cascade)

  @@index([mentorId])
  @@index([dayOfWeek])
  @@index([isActive])
}

/**
 * Available Time Slots - For specific dates/times when mentor is available
 * (one-off availability for specific dates)
 */
model AvailableSlot {
  id        String   @id @default(cuid())
  mentorId  String

  startTime DateTime
  endTime   DateTime

  createdAt DateTime @default(now())

  mentor Mentor @relation(fields: [mentorId], references: [id], onDelete: Cascade)

  @@index([mentorId])
  @@index([startTime])
}

/**
 * Blocked Time Slots - For specific dates/times when mentor is unavailable
 * (e.g., vacation, one-off appointments)
 */
model BlockedSlot {
  id        String   @id @default(cuid())
  mentorId  String

  startTime DateTime
  endTime   DateTime

  reason    String?  @db.Text // Optional note (e.g., "On vacation")

  createdAt DateTime @default(now())

  mentor Mentor @relation(fields: [mentorId], references: [id], onDelete: Cascade)

  @@index([mentorId])
  @@index([startTime])
}

/**
 * Notifications - In-app notifications for users
 */
model Notification {
  id        String   @id @default(cuid())
  userId    String

  type      String   // BOOKING_CONFIRMED, BOOKING_CANCELLED, REVIEW_RECEIVED, etc.
  title     String
  message   String   @db.Text
  link      String?  // Optional link to related resource

  isRead    Boolean  @default(false)
  readAt    DateTime?

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}
